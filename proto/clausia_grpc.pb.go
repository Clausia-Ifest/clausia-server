// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: clausia.proto

package clausiapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClausIA_Extract_FullMethodName         = "/clausia.ClausIA/Extract"
	ClausIA_ExtractMetadata_FullMethodName = "/clausia.ClausIA/ExtractMetadata"
	ClausIA_Summarize_FullMethodName       = "/clausia.ClausIA/Summarize"
	ClausIA_AnalyzeRisk_FullMethodName     = "/clausia.ClausIA/AnalyzeRisk"
	ClausIA_CheckCompliance_FullMethodName = "/clausia.ClausIA/CheckCompliance"
	ClausIA_Chat_FullMethodName            = "/clausia.ClausIA/Chat"
)

// ClausIAClient is the client API for ClausIA service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClausIAClient interface {
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
	ExtractMetadata(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractMetadataResponse, error)
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error)
	AnalyzeRisk(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*AnalyzeRiskResponse, error)
	CheckCompliance(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*CheckComplianceResponse, error)
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type clausIAClient struct {
	cc grpc.ClientConnInterface
}

func NewClausIAClient(cc grpc.ClientConnInterface) ClausIAClient {
	return &clausIAClient{cc}
}

func (c *clausIAClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, ClausIA_Extract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clausIAClient) ExtractMetadata(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractMetadataResponse)
	err := c.cc.Invoke(ctx, ClausIA_ExtractMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clausIAClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizeResponse)
	err := c.cc.Invoke(ctx, ClausIA_Summarize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clausIAClient) AnalyzeRisk(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*AnalyzeRiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeRiskResponse)
	err := c.cc.Invoke(ctx, ClausIA_AnalyzeRisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clausIAClient) CheckCompliance(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*CheckComplianceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckComplianceResponse)
	err := c.cc.Invoke(ctx, ClausIA_CheckCompliance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clausIAClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, ClausIA_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClausIAServer is the server API for ClausIA service.
// All implementations must embed UnimplementedClausIAServer
// for forward compatibility.
type ClausIAServer interface {
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	ExtractMetadata(context.Context, *ExtractRequest) (*ExtractMetadataResponse, error)
	Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error)
	AnalyzeRisk(context.Context, *ExtractRequest) (*AnalyzeRiskResponse, error)
	CheckCompliance(context.Context, *ExtractRequest) (*CheckComplianceResponse, error)
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	mustEmbedUnimplementedClausIAServer()
}

// UnimplementedClausIAServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClausIAServer struct{}

func (UnimplementedClausIAServer) Extract(context.Context, *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedClausIAServer) ExtractMetadata(context.Context, *ExtractRequest) (*ExtractMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractMetadata not implemented")
}
func (UnimplementedClausIAServer) Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedClausIAServer) AnalyzeRisk(context.Context, *ExtractRequest) (*AnalyzeRiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeRisk not implemented")
}
func (UnimplementedClausIAServer) CheckCompliance(context.Context, *ExtractRequest) (*CheckComplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompliance not implemented")
}
func (UnimplementedClausIAServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedClausIAServer) mustEmbedUnimplementedClausIAServer() {}
func (UnimplementedClausIAServer) testEmbeddedByValue()                 {}

// UnsafeClausIAServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClausIAServer will
// result in compilation errors.
type UnsafeClausIAServer interface {
	mustEmbedUnimplementedClausIAServer()
}

func RegisterClausIAServer(s grpc.ServiceRegistrar, srv ClausIAServer) {
	// If the following call pancis, it indicates UnimplementedClausIAServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClausIA_ServiceDesc, srv)
}

func _ClausIA_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_Extract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClausIA_ExtractMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).ExtractMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_ExtractMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).ExtractMetadata(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClausIA_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_Summarize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).Summarize(ctx, req.(*SummarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClausIA_AnalyzeRisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).AnalyzeRisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_AnalyzeRisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).AnalyzeRisk(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClausIA_CheckCompliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).CheckCompliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_CheckCompliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).CheckCompliance(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClausIA_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClausIAServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClausIA_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClausIAServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClausIA_ServiceDesc is the grpc.ServiceDesc for ClausIA service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClausIA_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clausia.ClausIA",
	HandlerType: (*ClausIAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _ClausIA_Extract_Handler,
		},
		{
			MethodName: "ExtractMetadata",
			Handler:    _ClausIA_ExtractMetadata_Handler,
		},
		{
			MethodName: "Summarize",
			Handler:    _ClausIA_Summarize_Handler,
		},
		{
			MethodName: "AnalyzeRisk",
			Handler:    _ClausIA_AnalyzeRisk_Handler,
		},
		{
			MethodName: "CheckCompliance",
			Handler:    _ClausIA_CheckCompliance_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _ClausIA_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clausia.proto",
}
